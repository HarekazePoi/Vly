package date.liyin.vly.fragment

import android.app.Activity
import android.content.Context
import android.content.Intent
import android.graphics.drawable.AnimationDrawable
import android.os.Bundle
import android.os.Handler
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.animation.AlphaAnimation
import android.view.animation.DecelerateInterpolator
import android.webkit.MimeTypeMap
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.constraintlayout.widget.ConstraintLayout
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.RecyclerView
import com.google.android.material.floatingactionbutton.FloatingActionButton
import com.google.ar.core.ArCoreApk
import date.liyin.vly.INTERNAL
import date.liyin.vly.MainActivity
import date.liyin.vly.R
import date.liyin.vly.bean.ModelBean
import date.liyin.vly.utils.AppDatabase
import liyin.party.skyrecycleradapter.RecyclerHelper
import liyin.party.skyrecycleradapter.SmartRecyclerAdapter
import java.util.*


/**
 * A simple [Fragment] subclass as the default destination in the navigation.
 */
class WelcomeFragment : Fragment() {
    lateinit var mAddModel: FloatingActionButton
    lateinit var mArSupport: TextView
    lateinit var mContainer: ConstraintLayout
    lateinit var recycler: RecyclerView
    lateinit var adapter: SmartRecyclerAdapter
    lateinit var anmi: AnimationDrawable

    companion object {
        const val PICK_ZIP_GL_FILE = 2
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        // Inflate the layout for this fragment
        return inflater.inflate(R.layout.fragment_welcome, container, false)
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        mAddModel = view.findViewById(R.id.fab_addmodel)
        mAddModel.setOnClickListener {
            val intent = Intent(Intent.ACTION_OPEN_DOCUMENT).apply {
                addCategory(Intent.CATEGORY_OPENABLE)
                type = "*/*"
                putExtra(
                    Intent.EXTRA_MIME_TYPES,
                    arrayOf(
                        MimeTypeMap.getSingleton().getMimeTypeFromExtension("glb"),
                        "application/zip"
                    )
                )
            }
            startActivityForResult(intent, PICK_ZIP_GL_FILE)
        }
        @Suppress("UNREACHABLE_CODE") /* INTERNAL is generated by Gradle, so it will change when build. */
        mAddModel.setOnLongClickListener {
            if (INTERNAL.getInternalModel() == null) {
                Toast.makeText(requireContext(), R.string.status_internal_null, Toast.LENGTH_SHORT)
                    .show()
                return@setOnLongClickListener true
            }
            AlertDialog.Builder(requireContext())
                .setTitle(R.string.dialog_internal_add)
                .setPositiveButton(R.string.dialog_btn_confirm) { _, _ ->
                    val bundle = Bundle()
                    bundle.putBoolean("installInternal", true)
                    findNavController().navigate(R.id.action_goto_dddconfig, bundle)
                }
                .setNegativeButton(R.string.dialog_btn_cancel) { _, _ -> }
                .create().show()
            true
        }

        recycler = view.findViewById(R.id.modelRecycler)
        recycler.layoutManager = RecyclerHelper.getLayoutManager(
            requireActivity(),
            RecyclerHelper.RecyclerViewLayoutMangerEnum.Linear_VERTICAL
        );
        adapter = SmartRecyclerAdapter(requireActivity())
        recycler.adapter = adapter
        loadData()

        mArSupport = view.findViewById(R.id.txt_support)
        mContainer = view.findViewById(R.id.welcome_bg)
        anmi = mContainer.background as AnimationDrawable
        anmi.setEnterFadeDuration(6000)
        anmi.setExitFadeDuration(2000)
        maybeEnableArButton()
    }

    private fun loadData() {
        adapter.clear()
        Thread {
            val dao = AppDatabase.getInstance(requireContext()).modelDao()
            dao.loadAllModel()?.forEach {
                if (it != null) {
                    if (it.type == "Live2D") {
                        adapter.addData(ModelBean("[${it.type}] ${it.name}", it.uid, "Live2D",
                            View.OnClickListener { _ ->
                                val bundle = Bundle()
                                bundle.putString("type", "Live2D")
                                bundle.putLong("uid", it.uid)
                                findNavController().navigate(R.id.action_goto_ar, bundle)
                            }, View.OnLongClickListener { _ ->
                                AlertDialog.Builder(requireContext())
                                    .setTitle(getString(R.string.dialog_edit_model, it.name))
                                    .setPositiveButton(R.string.dialog_btn_edit) { _, _ ->
                                        val bundle = Bundle()
                                        bundle.putLong("uid", it.uid)
                                        findNavController().navigate(
                                            R.id.action_goto_l2dconfig,
                                            bundle
                                        )
                                    }
                                    .setNegativeButton(R.string.dialog_btn_delete) { dialog, _ ->
                                        dialog.dismiss()
                                        AlertDialog.Builder(requireContext())
                                            .setTitle(
                                                getString(
                                                    R.string.dialog_title_delete,
                                                    it.name
                                                )
                                            )
                                            .setNegativeButton(R.string.dialog_btn_cancel) { cDialog, _ -> cDialog.dismiss() }
                                            .setPositiveButton(R.string.dialog_btn_confirm) { _, _ ->
                                                Thread {
                                                    val modelDao =
                                                        AppDatabase.getInstance(requireContext())
                                                            .modelDao()
                                                    val l2dDao =
                                                        AppDatabase.getInstance(requireContext())
                                                            ._l2dModelDao()
                                                    l2dDao.deleteModel(
                                                        l2dDao.loadAllModelWithUID(
                                                            it.uid
                                                        )!!.first()!!
                                                    )
                                                    modelDao.deleteModel(it)
                                                    requireActivity().runOnUiThread {
                                                        Toast.makeText(
                                                            requireContext(),
                                                            getString(
                                                                R.string.status_deleted,
                                                                it.name
                                                            ),
                                                            Toast.LENGTH_SHORT
                                                        ).show()
                                                        loadData()
                                                    }
                                                }.start()
                                            }
                                            .create().show()
                                    }
                                    .create().show()
                                true
                            })
                        )
                    } else {
                        adapter.addData(ModelBean("[${it.type}] ${it.name}", it.uid, "Live2D",
                            View.OnClickListener { _ ->
                                val bundle = Bundle()
                                bundle.putString("type", "3D")
                                bundle.putLong("uid", it.uid)
                                findNavController().navigate(R.id.action_goto_ar, bundle)
                            }, View.OnLongClickListener { _ ->
                                AlertDialog.Builder(requireContext())
                                    .setTitle(getString(R.string.dialog_edit_model, it.name))
                                    .setPositiveButton(R.string.dialog_btn_edit) { _, _ ->
                                        val bundle = Bundle()
                                        bundle.putLong("uid", it.uid)
                                        findNavController().navigate(
                                            R.id.action_goto_dddconfig,
                                            bundle
                                        )
                                    }
                                    .setNegativeButton(R.string.dialog_btn_delete) { dialog, _ ->
                                        dialog.dismiss()
                                        AlertDialog.Builder(requireContext())
                                            .setTitle(
                                                getString(
                                                    R.string.dialog_title_delete,
                                                    it.name
                                                )
                                            )
                                            .setNegativeButton(R.string.dialog_btn_cancel) { cDialog, _ -> cDialog.dismiss() }
                                            .setPositiveButton(R.string.dialog_btn_confirm) { _, _ ->
                                                Thread {
                                                    val modelDao =
                                                        AppDatabase.getInstance(requireContext())
                                                            .modelDao()
                                                    val p3dDao =
                                                        AppDatabase.getInstance(requireContext())
                                                            ._3dModelDao()
                                                    p3dDao.deleteModel(
                                                        p3dDao.loadAllModelWithUID(
                                                            it.uid
                                                        )!!.first()!!
                                                    )
                                                    modelDao.deleteModel(it)
                                                    requireActivity().runOnUiThread {
                                                        Toast.makeText(
                                                            requireContext(),
                                                            getString(
                                                                R.string.status_deleted,
                                                                it.name
                                                            ),
                                                            Toast.LENGTH_SHORT
                                                        ).show()
                                                        loadData()
                                                    }
                                                }.start()
                                            }
                                            .create().show()
                                    }
                                    .create().show()
                                true
                            })
                        )
                    }
                }
            }
        }.start()
    }

    private fun maybeEnableArButton() {
        val availability = ArCoreApk.getInstance().checkAvailability(this.activity)
        if (availability.isTransient) {
            mArSupport.setText(R.string.status_arcore_checking)
            Handler().postDelayed({ maybeEnableArButton() }, 200)
        } else {
            if (availability.isSupported) {
                recycler.visibility = View.VISIBLE
                recycler.isEnabled = true
                mAddModel.visibility = View.VISIBLE
                mAddModel.isEnabled = true
                mArSupport.setText(R.string.status_arcore_ready)
                val alphaAnimation = AlphaAnimation(0.0f, 1.0f)
                alphaAnimation.duration = 1500
                alphaAnimation.interpolator = DecelerateInterpolator()
                recycler.startAnimation(alphaAnimation)
                mAddModel.startAnimation(alphaAnimation)
            } else {
                recycler.visibility = View.INVISIBLE
                recycler.isEnabled = false
                mAddModel.visibility = View.INVISIBLE
                mAddModel.isEnabled = false
                mArSupport.setText(R.string.status_arcore_incompatible)
            }
        }

    }

    override fun onAttach(context: Context) {
        super.onAttach(context)
        (requireActivity() as MainActivity).currentFragment = this
    }

    override fun onResume() {
        super.onResume()
        if (!anmi.isRunning) anmi.start()
    }

    override fun onPause() {
        super.onPause()
        if (anmi.isRunning) anmi.stop()
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        when (requestCode) {
            PICK_ZIP_GL_FILE -> {
                if (resultCode == Activity.RESULT_OK) {
                    requireContext().externalCacheDir?.listFiles { _, name -> name.startsWith("install.") }
                        .orEmpty().forEach {
                            it.delete()
                        }
                    data?.data!!
                    if (data.data?.path!!.toLowerCase(Locale.ROOT).endsWith(".zip")) {
                        //Live2D zip
                        val bundle = Bundle()
                        bundle.putParcelable("install", data.data)
                        findNavController().navigate(R.id.action_goto_l2dconfig, bundle)
                    } else if (data.data?.path!!.toLowerCase(Locale.ROOT).endsWith(".glb")) {
                        //GLB
                        val bundle = Bundle()
                        bundle.putParcelable("install", data.data)
                        findNavController().navigate(R.id.action_goto_dddconfig, bundle)
                    } else {
                        Toast.makeText(
                            requireContext(),
                            R.string.status_not_support_file,
                            Toast.LENGTH_SHORT
                        ).show()
                    }
                }
            }
            else -> super.onActivityResult(requestCode, resultCode, data)
        }

    }
}
