package date.liyin.vly.virtualrender.renderer

import android.content.Context
import android.widget.ImageView
import com.google.ar.core.Anchor
import com.google.ar.sceneform.AnchorNode
import com.google.ar.sceneform.ArSceneView
import com.google.ar.sceneform.FrameTime
import com.google.ar.sceneform.math.Quaternion
import com.google.ar.sceneform.math.Vector3
import com.google.ar.sceneform.rendering.FixedHeightViewSizer
import com.google.ar.sceneform.rendering.Renderable
import com.google.ar.sceneform.rendering.ViewRenderable
import com.google.ar.sceneform.ux.TransformableNode
import date.liyin.vly.R
import date.liyin.vly.virtualrender.FloatingConfig
import date.liyin.vly.virtualrender.ModelTransformConfig
import date.liyin.vly.virtualrender.PlaceMode
import date.liyin.vly.virtualrender.VirtualRender

class ImagePlaceRenderer(context: Context, loadEnded: () -> Unit) : VirtualRender(context, loadEnded) {
    private lateinit var renderable : ViewRenderable
    override fun getPlaceMode(): PlaceMode = PlaceMode.HORIZONTAL_UPWARD_ONLY
    override fun getFloatingConfig(): Map<FloatingConfig, Boolean> =
        FloatingConfig.builder().apply {
            this[FloatingConfig.FACE] = false
            this[FloatingConfig.ACTION] = false
        }.toMap()

    override fun getModelTransformConfig(): Map<ModelTransformConfig, Any> =
        ModelTransformConfig.builder().apply {
            this[ModelTransformConfig.ROTATE] = false
            this[ModelTransformConfig.SCALE] = false
            this[ModelTransformConfig.TRANSLATION] = false
            this[ModelTransformConfig.FAKESHADOW] = true
        }.toMap()

    override fun loadModel(func : (Renderable) -> Unit) {
        ViewRenderable.builder()
            .setView(context, R.layout.ar_imageview)
            .setVerticalAlignment(ViewRenderable.VerticalAlignment.BOTTOM)
            .setHorizontalAlignment(ViewRenderable.HorizontalAlignment.CENTER)
            .setSizer(FixedHeightViewSizer(1.72f))
            .build()
            .thenAccept { model ->
                model.view.findViewById<ImageView>(R.id.ar_iv).setImageResource(R.drawable.liyin)
                model.isShadowCaster = false
                model.isShadowReceiver = false
                func(model)
                this.renderable = model
                loadEnded()
            }
            .exceptionally {
                Exception(it).printStackTrace()
                null
            }
    }

    override fun getAnimationList(): Set<String> {
        return emptySet()
    }

    override fun hasAnimation(animationName: String): Boolean {
        return false
    }

    override fun playAnimation(
        animationName: String,
        animationDuration: Long?,
        repeatCount: Int?,
        doOnEnd: (() -> Unit)?
    ) { }

    override fun setModelToAnimationStartOrEnd() { }

    override fun stopLastAnimation() { }

    override fun onUpdate(arSceneView: ArSceneView, frameTime: FrameTime?, anchor: Anchor?, anchorNode: AnchorNode?, nodeTransformableNode: TransformableNode?, fakeShadow: TransformableNode?) {
        if (anchor != null && anchorNode != null && fakeShadow != null) {
            val cameraPosition = arSceneView.scene.camera.worldPosition.apply { this.y = 0f }
            val cardPosition = fakeShadow.worldPosition.apply { this.y = 0f }
            val direction = Vector3.subtract(cameraPosition, cardPosition)
            val lookRotation = Quaternion.lookRotation(direction, Vector3.up())
            fakeShadow.worldRotation = lookRotation
        }
    }

    override fun end() {

    }
}